#!/usr/bin/env ruby

# XXX What can go wrong with this loading approach?
libdir = File.expand_path(File.join(File.dirname(__FILE__), "..", "lib"))
if File.directory?(libdir) and File.exists?(File.join(libdir, "automateit.rb"))
  $LOAD_PATH.unshift(libdir)
end

require 'rubygems'
require 'optparse'
require 'automateit'

OptionParser.new do |parser|
  PROG = File.basename($0)
  opts = {}
  parser.banner = <<EOB
#{PROG} - tool for querying lists of hosts with certain AutomateIt tags

Usage: #{PROG} [options] query

Examples:
  # Load 'myproject' and query hosts tagged with 'svn' or 'apache'
  #{PROG} -p myproject 'svn || apache'

  # Same but using environmental variable to specify project:
  AUTOMATEIT_PROJECT=myproject
  #{PROG} 'svn || apache'

  # Dump the list of matching hosts as YAML
  #{PROG} -y apache

  # Dump the list of matching hosts as XML
  #{PROG} -x apache

Options:
EOB
  parser.on("-p", "--project PATH", "Set project path") do |v|
    opts[:project] = v
  end

  parser.on("-y", "--yaml", "Dump as YAML") do |v|
    opts[:yaml] = v
  end

  parser.on("-x", "--xml", "Dump as XML") do |v|
    opts[:xml] = v
  end

  args = parser.parse!.dup

  # Clear ARGV so that IRB doesn't try to parse our options
  opts[:args] = args
  ARGV.clear

  query = args.first unless args.empty?

  interpreter = AutomateIt.new(:project => opts[:project])
  result = interpreter.hosts_tagged_with(query)
  if result.nil?
    puts result.inspect
    exit 1
  elsif opts[:yaml]
    puts result.to_yaml
  elsif opts[:xml]
    puts result.to_xml
  else
    puts result.is_a?(String) ? result : result.join(" ")
  end
  exit 0
end

