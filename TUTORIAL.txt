== Get Started! A hands-on tutorial for learning AutomateIt

AutomateIt is an open-source tool for automating the setup and maintenance of UNIX systems.

This hands-on guide will teach you how to use AutomateIt and explain where to find more detailed instructions.

=== Ruby

AutomateIt is written using the Ruby programming language. If you haven't used Ruby, you'll find it easy to learn and a pleasure to use. If you already know the basics of Perl, Python, PHP or Java, you'll be able to pick up Ruby almost instantly. Although AutomateIt provides much of the structure and commands needed, you still need to know the basic Ruby syntax to get by.

Some Ruby resources:
* Ruby's official documentation page: http://www.ruby-lang.org/en/documentation/
* The online "Ruby user's guide" is a gentle introduction to the Ruby language: http://www.ruby-doc.org/docs/UsersGuide/rg/
* The online "Ruby syntax" is a condensed, one-page reference of the language's syntax: http://www.ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/syntax.html
* The online "Programming Ruby" site provides a fairly detailed walk-through of the language: http://www.ruby-doc.org/docs/ProgrammingRuby/
* The "Practical Ruby for System Administration" book is a gentle introduction for sysadmins, which may be much easier for them to understand than a book aimed at software engineers, and it covers many system administration automation topics that'll be of use for Automateit recipes: http://www.pragmaticprogrammer.com/title/ruby/index.html
* The "Programming Ruby" book provides a much more complete language reference than any online reference: http://www.pragmaticprogrammer.com/titles/ruby/index.html

=== Typographical conventions

AutomateIt's technical documentation uses the following typographical conventions:

* +automateit+ -- A file, command or variable.
* <tt>:verbosity</tt> -- A symbol, usually used in an options hash.
* AutomateIt::ShellManager -- A class, with a link to its documentation. You can also find a link to this class' documentation in the "Classes" pane on the left.
* AutomateIt::ShellManager#sh -- An method, with a link to its documentation. You can also find a link to this method's documentation in the "Methods" pane on the left.
* Ruby code:
 puts "Ruby code"
* UNIX shell command, although the prompt may be left off when obvious:
 you@host:myproject> echo "UNIX command run from the 'myproject' directory"
* AutomateIt interactive shell command, although the prompt may be left off when obvious:
 ai> puts "I'm in the Interpreter"

=== Glossary

AutomateIt uses a number of unique terms:

* *Recipe* -- A file that contains AutomateIt commands.
* *Project* -- A special directory that contains related recipes and helper files.
* *Interpreter* -- The part of AutomateIt that runs commands.
* *Plugin* -- A part of AutomateIt that describes related features.
* *Driver* -- An implementation of a plugin, there are often multiple drivers per plugin.

=== Interactive shell

AutomateIt comes with an interactive shell, which is useful for exploring commands and developing recipes.

Here's what an interactive shell session looks like -- however, the lines starting with the <tt>#</tt> symbol are added annotations explaining what's going on and are not actually part of the session:

 # Run the AutomateIt interactive shell
 you@host:tmp> automateit
 # Welcome message from AutomateIt
 => AutomateIt Shell v0.5.0
 => <CTRL-D> to quit, <Tab> to auto-complete
 # AutomateIt's prompt and a command
 ai> puts "Hello world!"
 # Output from the "puts" command
 Hello world!
 # The return value of the "puts" command
 => nil
 # Prompt and another command
 ai> self.class
 # Another return value
 => AutomateIt::Interpreter
 # Press <CTRL-D> to exit the shell
 ai> <CTRL-D>
 # We're back to the UNIX shell
 you@host:tmp>

=== Recipe files

The Interpreter can run recipe files that contain AutomateIt commands.

For example, create a <tt>/tmp/hello.rb</tt> file that contains:

 puts "Hello, I'm an #{self.class}"

Then run the recipe:

 you@host:tmp> automateit /tmp/hello.rb
 Hello, I'm an AutomateIt::Interpreter

=== String evaluation

The Interpreter can also evaluate commands as strings:

 you@host:tmp> automateit -e 'puts self.class'
 AutomateIt::Interpreter

=== Exploring the Interpreter's unique methods

The Interpreter provides some unique methods:

 ai> unique_methods
 => ["account_manager", "address_manager", "cd", "chmod", ...

The names are Interpreter methods. Names ending with +_manager+ are methods for accessing plugins, while the rest are normal methods. The AutomateIt::Interpreter documentation provides a list of these methods and links to their individual documentation.

For example, one of the commands listed is +pwd+, which can be used like this:

 ai> pwd
 => "/tmp"

AutomateIt provides many commands that work just like the UNIX shell commands you already know, so you'll be productive quickly.

=== Conditional execution

AutomateIt executes only the commands needed to achieve a desired state, which makes recipes repeatable, reusable and maintainable.

Eliminating the distinction between setup and maintenance means the same command can perform both tasks without concern for the host's condition. A properly-written recipe can be run and re-run immediately afterwards, and it will do nothing the second time because all changes have already been applied.

An example can make this clearer -- again the lines starting with <tt>#</tt> are annotations and aren't part of the session:

 # Start the AutomateIt interactive shell
 you@host:tmp> automateit
 => AutomateIt Shell v0.5.0
 => <CTRL-D> to quit, <Tab> to auto-complete
 # Create a directory called "asdfasdf"
 ai> mkdir "asdfasdf"
 # AutomateIt output showing that it's creating this directory
 ** mkdir asdfasdf
 # Return value of directories created
 => ["asdfasdf"]
 # Let's try creating the same directory again
 ai> mkdir "asdfasdf"
 # Nothing happened because the directory already exists
 => false
 # Remove the directory
 ai> rmdir "asdfasdf"
 # Output indicating that the directory is being removed
 ** rmdir asdfasdf
 # Return value with directories removed
 => ["asdfasdf"]
 # Try to remove the directory again
 ai> rmdir "asdfasdf"
 # Nothing happened because there is no directory to remove
 => false

Notice how the second time that +mkdir+ was run in the session above, it returned +false+ and didn't create a directory? That's the conditional execution in action. Similarly, the +rmdir+ only worked the first time, but returned +false+ and took no action when the directory was already gone.

=== Plugins

AutomateIt uses an extensible plugin architecture to group together related commands:

* AutomateIt::AccountManager -- Manipulates users and groups.
* AutomateIt::AddressManager -- Manipulates host's network addresses.
* AutomateIt::EditManager -- Edits files and strings.
* AutomateIt::FieldManager -- Queries configuration variables.
* AutomateIt::PackageManager -- Manipulates software packages.
* AutomateIt::PlatformManager -- Queries platform, e.g. its OS version.
* AutomateIt::ServiceManager -- Manipulates services, e.g. UNIX daemons.
* AutomateIt::ShellManager -- Manipulates files and executes UNIX commands.
* AutomateIt::TagManager -- Groups hosts by role and queries membership.
* AutomateIt::TemplateManager -- Renders templates to files.

Plugins can be accessed from the Interpreter like this:

 ai> shell_manager.pwd
 => "/tmp"

The most common plugin methods have aliased shortcuts, e.g. +pwd+ is the alias for <tt>shell_manager.pwd</tt>. These are documented in AutomateIt::Interpreter's "Aliased methods".

=== Drivers

Each plugin has one or more drivers that implement its functionality.

For example:

* AutomateIt::ShellManager -- A plugin for running shell commands.
* AutomateIt::ShellManager::Portable -- A portable but limited-functionality driver that implements the ShellManager's methods.
* AutomateIt::ShellManager::UNIX -- A full-featured driver implementing ShellManager's methods that only runs on UNIX-like systems.

=== Plugins and drivers as APIs

Each plugin describes a common interface to features. This provides a consistent abstraction that eliminates platform-specific issues that typically infuriate cross-platform developers.

For example, the UNIX command for installing packages on a Debian system is:

 apt-get install -y -q some_package_name < /dev/null

While on a Fedora system, it's:

 yum -y -d 0 -e 0 install some_package_name < /dev/null

However, you don't want to run the installer if the package is already present, so you need to write conditional code like:

 if dpkg --status some_package_name 2>&1 | \
     egrep '^Status: .*?\binstalled\b' > /dev/null; then
   apt-get install -y -q some_package_name < /dev/null
 done

Yuck. Worse still, many package managers require multiple commands, make you parse tricky output because they don't use sensible return values, and a few demand user interaction even when there's no need for it. Having to remember platform-specific commands and struggle with their quirks is a pain.

AutomateIt solves this problem by providing a common API for all package managers. The AutomateIt::PackageManager class provides an abstract installer command that works the same way for APT, YUM, Gem, Egg and so on using this format:

 package_manager.install "foo"

This AutomateIt checks if the package is installed, installs it if it isn't, and does nothing if the package is present. This eliminates the need for quirky, platform-specific commands and awkward conditionals.

=== Driver auto-detection

AutomateIt can automatically detect the most suitable driver for each plugin command.

For example, the AutomateIt::PackageManager plugin has drivers called AutomateIt::PackageManager::APT and AutomateIt::PackageManager::YUM. On a Debian system, which uses the <tt>apt-get</tt> packaging tool, AutomateIt will detect this and use the AutomateIt::PackageManager::APT driver to do the actual work:

 ai> package_manager.installed? "apache2"
 => true

=== Using a specific driver

Sometimes it's necessary to specify the driver that will be used. The recommended way to do this is to pass a <tt>:with => :driver_name</tt> option to the plugin command.

For example, tell the package manager to use the Gem driver:

 ai> package_manager.installed? "automateit", :with => :gem
 => true

You can also completely bypass the plugin and its auto-detection to directly interact with the driver:

 ai> package_manager[:gem].installed? "automateit"
 => true

=== Projects

A project is a special directory that contains related recipes and helper files. Although its possible to run recipe files without a project, a project provides many useful features, described in the AutomateIt::Project documentation.

A project is created by specifying the directory to create:

 you@host:tmp> cd /tmp
 you@host:tmp> automateit --create myproject
 ** mkdir -p myproject
 => Creating AutomateIt project at: myproject
 ** cd myproject
 ** mkdir config
 ** cd config
 => Rendering 'tags.yml' because of it doesn't exist
 => Rendering 'fields.yml' because of it doesn't exist
 => Rendering 'automateit_env.rb' because of it doesn't exist
 ** cd -
 ** mkdir dist
 ** cd dist
 => Rendering 'README.txt' because of it doesn't exist
 ** cd -
 ** mkdir lib
 ** cd lib
 => Rendering 'README.txt' because of it doesn't exist
 ** cd -
 ** mkdir recipes
 ** cd recipes
 => Rendering 'README.txt' because of it doesn't exist
 ** cd -
 => DONE!

This creates a <tt>/tmp/myproject</tt> directory with the newly-created project. It contains directories, each with a <tt>README.txt</tt> file explaining the directory's purpose, and individual files like <tt>tags.yml</tt> that contain comments with basic usage instructions.

The project creator is an AutomateIt recipe, so it's smart enough to only execute the commands needed. If the project creator is re-run against an existing project, it won't make any changes because none are needed:

 you@host:tmp> automateit --create myproject
 => Found AutomateIt project at: myproject
 => DONE!

=== Project recipes

To associate a recipe with a project, put it into the project's +recipes+ directory.

For example, create a <tt>recipes/hello_project.rb</tt> file with these contents:

 puts "Hello, this is: " + project

And run it:

 you@host:myproject> automateit recipes/hello_project.rb
 Hello, this is: /tmp/myproject

The Interpreter automatically loads the project. The +project+ method contains the project path and is only available when executing a recipe associated with a project.

=== Fields

A project's <tt>config/fields.yml</tt> file is meant to store configuration constants, like custom paths for applications. Fields are useful because they keeps configuration variables separate from recipes and can be easily queried from UNIX using the +aifield+ command. More information about fields can be found in AutomateIt::FieldManager.

For example, consider a fields file like this:

 myuser: dhh
 myapp:
   path: /var/www/rails

Use these from the interactive shell:

 you@host:myproject> pwd
 /tmp/myproject
 you@host:myproject> automateit -p .
 => AutomateIt Shell v0.5.0
 => <CTRL-D> to quit, <Tab> to auto-complete
 ai> lookup :myuser
 => "dhh"
 ai> lookup "myuser"
 => "dhh"
 ai> lookup "myapp"
 => {"path"=>"/var/www/rails"}
 ai> lookup "myapp#path"
 => "/var/www/rails"

In the example above, the <tt>-p .</tt> argument to +automateit+ causes the Interpreter to load the project in the current directory. The argument can be an absolute or relative paths. Loading the project is necessary so the shell can find the fields. More command-line arguments are available, run <tt>automateit --help</tt> for details.

Fields are queried by strings or symbols. A convenience syntax is provided for looking up hash subkeys. For example, <tt>lookup "myapp#path"</tt> is a shortcut for <tt>lookup("myapp")["path"]. Both of these commands query the +myapp+ hash and return the value of its +path+ key.

The Interpreter loads a project and its fields automatically for recipes. For example, a project recipe file <tt>recipes/hello_fields.rb</tt> contains:

 puts lookup("myapp#path")

This recipe will load its project and fields automatically:

 you@host:myproject> automateit recipes/hello_fields.rb
 /var/www/rails

=== Tags

A project's <tt>config/tags.yml</tt> file describes tags assigned to hosts, grouping together hosts by their roles and attributes.

For example, this tags file describes a "desktops" tag with three hosts named "satori", "sunyata" and "michiru", and another tag named "notebooks" with other hosts:
  desktops:
    - satori
    - sunyata
    - michiru
  notebooks:
    - rheya
    - avijja

The tags can be accessed like this when run on a host named "satori":

 you@satori:myproject> automateit -p .
 ai> tags
 => ["satori", "desktops", "localhost", ...]
 ai> tagged?("desktops")
 => true
 ai> tagged?("notebooks")
 => false
 ai> tagged?(:satori)
 => true
 ai> tagged?("satori")
 => true
 ai> tagged?("satori || desktops")
 => true
 ai> tagged?("(satori || desktops) && !notebooks")
 => true

Role-based behavior can be demonstrated by creating a file called <tt>recipes/hello_tags.rb</tt>:

 if tagged?("localhost")
  puts "I'm a localhost!"
 end
 if tagged?("desktops")
  puts "Special commands to execute on desktops"
 elsif tagged?("notebooks")
  puts "Special commands to execute on notebooks"
 end

Here are the results when executed on a host called "satori":

 you@satori:myproject> automateit recipes/hello_tags.rb
 I'm a localhost!
 Special commands to execute on desktops

Notice how the +notebooks+ section wasn't executed? Tags make it possible to create sophisticated recipes that run commands on only the appropriate systems.

More documentation on tags can be found in AutomateIt::TagManager.

=== Previewing commands

It's important to preview the commands a recipe will run without letting them actually modify the system.

The Interpreter has a boolean that determines if it'll make changes to your system. This variable can be called from two different ways for the sake of code clarity:
* +writing+: Will it write changes?
* +noop+: Will it not write changes? The +noop+ means "no-operation"

Here's an example with the interactive shell, with comments for annotations:

 # Enter the noop mode
 ai> noop true
 # Are we in noop mode?
 ai> noop?
 # Yes, we are in noop mode
 => true
 # Are we writing? This is the opposite of noop
 ai> writing?
 # No, we're not writing
 => false
 # Try to create a directory
 ai> mkdir "foo"
 # AutomateIt prints preview output showing that it needs to create it
 ** mkdir foo
 # Return value from 'mkdir' says the 'foo' directory needed to be created
 => ["foo"]
 # So was the directory actually made?
 ai> File.directory? "foo"
 # No, because we're in noop mode.
 => false

Recipes can take advantage of the noop mode as well, consider a <tt>mkdir_example.rb</tt> recipe:

 mkdir "foo"

To run this recipe with noop mode, pass the <tt>-n</tt> option to the Interpreter shell:

 you@host:tmp> automateit -n mkdir_example.rb
 ** mkdir foo
 you@host:tmp> ls foo
 ls: foo: No such file or directory

Notice how the directory wasn't actually created?

WARNING: Be sure to read the notes on changing directories during preview mode in the ShellManager.

=== Conclusion

I hope you enjoy working with AutomateIt and look forward to hearing about your
experiences with it. Drivers, patches, documentation and ideas are welcome. 

Thank you for taking the time to read this!

- Igal Koshevoy (igal@pragmaticraft.com)
