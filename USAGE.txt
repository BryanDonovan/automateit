= Using AutomateIt

=== Executing commands and invoking recipe files

You can run a recipe from the UNIX shell by running:

  automateit your_recipe_file.rb

Or start an interactive shell from the UNIX shell by running:

  automateit

You can enter any valid Ruby code into the recipe file or interpreter
shell, plus the special methods offered by the interpreter.

Or if you want to type a shorter name than <tt>automateit</tt> at the
UNIX shell, you can use the shortcut name <tt>ai</tt>.

=== Discovering Interpreter features

Let's explore AutomateIt by starting up an interactive shell by running the
following command from the UNIX shell:

  automateit

You can now enter commands into AutomateIt. Each command you enter will be run
against the AutomateIt Interpreter. For example, there's an Interpreter method
called <tt>superuser?</tt> that tells you if you're running the Interpreter
with superuser (root) privileges. You can run this by entering the following
into the interactive shell:

  superuser?

Although you should read the documentation for the AutomateIt::Interpreter,
it's often useful to be able to interactively see what methods are available.
You can do this by entering:

  unique_methods

This will display an array of strings, each one is the name of an Interpreter
method. You'll notice the <tt>superuser?</tt> method listed among these.

=== Plugins

AutomateIt uses plugins to provide related features:

* AutomateIt::AccountManager -- Manipulates users and groups.
* AutomateIt::AddressManager -- Manipulates host's network addresses.
* AutomateIt::EditManager -- Edits files and strings.
* AutomateIt::FieldManager -- Queries configuration variables.
* AutomateIt::PackageManager -- Manipulates software packages.
* AutomateIt::PlatformManager -- Queries platform, e.g. its OS version.
* AutomateIt::ServiceManager -- Manipulates services, e.g. UNIX daemons.
* AutomateIt::ShellManager -- Manipulates files and executes UNIX commands.
* AutomateIt::TagManager -- Groups hosts by role and queries membership.
* AutomateIt::TemplateManager -- Renders templates to files.

=== Using plugins

Plugins can be accessed from the Interpreter. For example, the ShellManager
plugin has a +sh+ command that executes UNIX commands (documented at
AutomateIt::ShellManager#sh). You can run this command from the Interpreter by
entering:

  shell_manager.sh "ls -la"

Although you should read the documentation for the various plugins, you can
also interactively query them to see what methods they provide by entering a
command like this:

  shell_manager.unique_methods

You can also interactively see what plugins are available by entering:

  plugins.keys

You will then see an array like this:

  [:field_manager, :shell_manager, :edit_manager, :address_manager,
  :account_manager, :package_manager, :tag_manager, :platform_manager,
  :template_manager, :service_manager]

Each name above represents. For example, we see <tt>:shell_manager</tt> which
corresponds to the <tt>shell_manager</tt> method in the Interpreter, which is
documented in Automateit::ShellManager.

=== Aliased methods

You'll use some plugin methods frequently and may get tired of typing them, so
the most common ones have been aliased to shorter names. For example, the
following commands will do the same thing:

  shell_manager.sh "ls"

  sh "ls"

A complete set of aliased methods includes:

* cd -- AutomateIt::ShellManager#cd
* chmod -- AutomateIt::ShellManager#chmod
* chmod_R -- AutomateIt::ShellManager#chmod_R
* chown -- AutomateIt::ShellManager#chown
* chown_R -- AutomateIt::ShellManager#chown_R
* chperm -- AutomateIt::ShellManager#chperm
* cp -- AutomateIt::ShellManager#cp
* cp_r -- AutomateIt::ShellManager#cp_r
* edit -- AutomateIt::EditManager#edit
* hosts_tagged_with -- AutomateIt::TagManager#hosts_tagged_with
* install -- AutomateIt::ShellManager#install
* ln -- AutomateIt::ShellManager#ln
* ln_s -- AutomateIt::ShellManager#ln_s
* ln_sf -- AutomateIt::ShellManager#ln_sf
* lookup -- AutomateIt::FieldManager#lookup
* mkdir -- AutomateIt::ShellManager#mkdir
* mkdir_p -- AutomateIt::ShellManager#mkdir_p
* mktemp -- AutomateIt::ShellManager#mktemp
* mktempdir -- AutomateIt::ShellManager#mktempdir
* mktempdircd -- AutomateIt::ShellManager#mktempdircd
* mv -- AutomateIt::ShellManager#mv
* pwd -- AutomateIt::ShellManager#pwd
* render -- AutomateIt::TemplateManager#render
* rm -- AutomateIt::ShellManager#rm
* rm_r -- AutomateIt::ShellManager#rm_r
* rm_rf -- AutomateIt::ShellManager#rm_rf
* rmdir -- AutomateIt::ShellManager#rmdir
* sh -- AutomateIt::ShellManager#sh
* tagged? -- AutomateIt::TagManager#tagged?
* tags -- AutomateIt::TagManager#tags
* tags_for -- AutomateIt::TagManager#tags_for
* touch -- AutomateIt::ShellManager#touch
* umask -- AutomateIt::ShellManager#umask
* which -- AutomateIt::ShellManager#which
* which! -- AutomateIt::ShellManager#which!

=== Projects

You should consider creating a Project to organize your recipes, tags, fields
and custom plugins and libraries. It also provides you with additional
convenience features. See documentation for AutomateIt::Project.

=== Embedding

You can embed the AutomateIt Interpreter inside a Ruby program like this:

  require 'rubygems'
  require 'automateit'

  interpreter = AutomateIt.new

  # Use the interpreter as an object:
  interpreter.sh "ls -la"

  # Have it execute a recipe:
  interpreter.invoke "myrecipe.rb"

  # Or execute recipes within a block
  interpreter.instance_eval do
    puts superuser?
    sh "ls -la"
  end

=== Conclusion

I hope you enjoy working with AutomateIt and look forward to hearing about your
experiences with it. Drivers, patches, documentation and ideas are welcome.

- Igal Koshevoy (igal@pragmaticraft.com)
